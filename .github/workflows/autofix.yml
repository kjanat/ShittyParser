name: PowerShell Module Autofix

on:
  push:
    branches: [master]
    paths:
      - "**.ps1"
      - "**.psm1"
      - "**.psd1"
      - ".github/workflows/autofix.yml"
  pull_request:
    branches: [master]
    paths:
      - "**.ps1"
      - "**.psm1"
      - "**.psd1"
      - ".github/workflows/autofix.yml"

env:
  shell: pwsh

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
            Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
          }
          Import-Module PSScriptAnalyzer

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $settingsPath = "./.github/ps-analysis-settings.psd1"
          if (Test-Path -Path $settingsPath) {
            Write-Output "Using PSScriptAnalyzer settings from $settingsPath"
            $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings $settingsPath
          } else {
            Write-Output "PSScriptAnalyzer settings file not found. Using default settings."
            $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          }

          if ($results) {
            $results | Format-Table -AutoSize
            Write-Output "::warning::PSScriptAnalyzer found $($results.Count) issues."
          } else {
            Write-Output "::notice::No PSScriptAnalyzer issues found."
          }

      - name: Format PowerShell files
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path . -Include "*.ps1","*.psm1","*.psd1" -Recurse |
                   Where-Object { $_.FullName -notlike "*.git*" }
          foreach ($file in $files) {
            try {
              $content = Get-Content -Path $file.FullName -Raw
              $formatted = Invoke-Formatter -ScriptDefinition $content
              if ($content -ne $formatted) {
                Set-Content -Path $file.FullName -Value $formatted -Encoding UTF8
                Write-Output "::notice::Formatted $($file.Name)"
              }
            } catch {
              Write-Output "::warning::Failed to format $($file.Name): $_"
            }
          }

      - name: Check for changes
        id: git-check
        shell: pwsh
        run: |
          $status = git status -s
          if ($status) {
            echo "changes_detected=true" >> $env:GITHUB_OUTPUT
            git status
          } else {
            echo "changes_detected=false" >> $env:GITHUB_OUTPUT
          }

      - name: Commit changes if needed
        if: steps.git-check.outputs.changes_detected == 'true' && github.event_name == 'push'
        shell: pwsh
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-format PowerShell scripts"
          git push

  test:
    name: Test Module
    runs-on: windows-latest
    needs: lint-and-format
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install Pester
        shell: pwsh
        run: |
          if (-not (Get-Module -ListAvailable -Name Pester)) {
            Install-Module -Name Pester -Force -Scope CurrentUser -MinimumVersion 5.0.0
          }
          Import-Module Pester -MinimumVersion 5.0.0

      - name: Run Tests
        shell: pwsh
        run: |
          if (Test-Path -Path "./Tests") {
            $testResults = Invoke-Pester -Path ./Tests -PassThru -Output Detailed

            if ($testResults.FailedCount -gt 0) {
              Write-Output "::error::$($testResults.FailedCount) tests failed"
              exit 1
            } else {
              Write-Output "::notice::All tests passed! ($($testResults.PassedCount) tests)"
            }
          } else {
            Write-Output "::warning::No Tests directory found. Skipping tests."
          }

  build:
    name: Build Module
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Update module version
        shell: pwsh
        run: |
          $manifestPath = "./ShittyParser/ShittyParser.psd1"
          $manifest = Import-PowerShellDataFile -Path $manifestPath
          $version = [Version]$manifest.ModuleVersion
          $newVersion = [Version]::new($version.Major, $version.Minor, $version.Build + 1)

          $content = Get-Content -Path $manifestPath -Raw
          $content = $content -replace "ModuleVersion\s+=\s+'$version'", "ModuleVersion = '$newVersion'"
          Set-Content -Path $manifestPath -Value $content -Encoding UTF8

          Write-Output "::notice::Updated module version to $newVersion"

      - name: Commit version change
        shell: pwsh
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./ShittyParser/ShittyParser.psd1
          git commit -m "Bump version [skip ci]"
          git push
